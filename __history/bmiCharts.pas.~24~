unit bmiCharts;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, VclTee.TeeGDIPlus, VCLTee.TeEngine,
  Vcl.ExtCtrls, VCLTee.TeeProcs, VCLTee.Chart, globalUnit, Vcl.StdCtrls,
  Vcl.WinXCalendars, Vcl.Grids, VCLTee.Series, math;

type
  Tform_bmiCharts = class(TForm)
    cht_bmi: TChart;
    cdr_selectDate: TCalendarView;
    lbl_title: TLabel;
    btn_choice1: TButton;
    btn_choice2: TButton;
    btn_choice3: TButton;
    btn_choice4: TButton;
    btn_choice5: TButton;
    stg_choices: TStringGrid;
    btn_view: TButton;
    lbl_cdrError: TLabel;
    lbl_stgError: TLabel;
    Series1: TLineSeries;
    procedure FormCreate(Sender: TObject);
    procedure btn_choice1Click(Sender: TObject);
    procedure btn_choice2Click(Sender: TObject);
    procedure btn_choice3Click(Sender: TObject);
    procedure btn_choice4Click(Sender: TObject);
    procedure btn_choice5Click(Sender: TObject);
    procedure btn_viewClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  form_bmiCharts: Tform_bmiCharts;
  chartDataBMI: array[0..4] of double;
  chartDataDate:array[0..4] of TDate;

implementation

{$R *.dfm}

//adding choice to stringGrid. Parameters: choice, calendar, error label, stringgrid
procedure addChoice(choiceNum:integer; calendar: TCalendarView; errorLabel:TLabel; stg_choices:TStringGrid);
var
path:string;
index: integer;
bmiData: TStringList;
length: integer;
begin
path:= currentDir + '\' +'bmiProgress.txt'; //directory of the user's factor progress file
bmiData:=TStringList.Create; //creating a stringList to hold all the data in the progress file
bmiData.LoadFromFile(path); //loading the file data into stringList factorData
length:= bmiData.Count; //getting length of bmiData
index:= searchDate(bmiData, calendar.Date, 1, length-1); //finding index of date in bmiProgress
if index = -1 then //if date not found
  begin
  errorLabel.show; //show error message
  errorLabel.Caption:='There is no recorded '+#13#10+'data for this date' //error caption
  end
else
  begin
  stg_choices.cells[1,choiceNum-1]:= bmiData[index]; //display date on grid
  chartDataBMI[choiceNum-1]:= strtofloat(bmiData[index+1]);
  chartDataDate[choiceNum-1]:= strtodate(bmiData[index]);
  end;
bmiData.Free; //free stringgrid
end;

procedure Tform_bmiCharts.btn_choice1Click(Sender: TObject);
begin
lbl_cdrError.Hide; //hide any previous error messages
addChoice(1, cdr_selectDate, lbl_cdrError, stg_choices); //procedure addChoice
end;

procedure Tform_bmiCharts.btn_choice2Click(Sender: TObject);
begin
lbl_cdrError.Hide; //hide any previous error messages
addChoice(2, cdr_selectDate, lbl_cdrError, stg_choices); //procedure addChoice
end;

procedure Tform_bmiCharts.btn_choice3Click(Sender: TObject);
begin
lbl_cdrError.Hide; //hide any previous error messages
addChoice(3, cdr_selectDate, lbl_cdrError, stg_choices); //procedure addChoice
end;

procedure Tform_bmiCharts.btn_choice4Click(Sender: TObject);
begin
lbl_cdrError.Hide; //hide any previous error messages
addChoice(4, cdr_selectDate, lbl_cdrError, stg_choices); //procedure addChoice
end;

procedure Tform_bmiCharts.btn_choice5Click(Sender: TObject);
begin
lbl_cdrError.Hide; //hide any previous error messages
addChoice(5, cdr_selectDate, lbl_cdrError, stg_choices); //procedure addChoice
end;

function getMinDate(dateArray:array of Tdate):Tdate;
var
minDate: Tdate;
I:integer;
begin
minDate:= dateArray[0];
for i := 1 to 4 do
  if dateArray[i] < minDate then
    minDate:= dateArray[i];
result:= minDate;
end;

function getMaxDate(dateArray:array of Tdate):Tdate;
var
maxDate: Tdate;
I:integer;
begin
maxDate:= dateArray[0];
for i := 1 to 4 do
  if dateArray[i] > maxDate then
    maxDate:= dateArray[i];
result:= maxDate;
end;

procedure Tform_bmiCharts.btn_viewClick(Sender: TObject);
var
row, I:integer;
isBlank: boolean;
minDate,maxDate:TDate;

begin
for row := 0 to 4 do
  if stg_choices.Cells[1,row].IsEmpty then //ensuring all choices are full
    begin
    isBlank:=TRUE;
    lbl_stgError.Caption:= 'Please fill all choices'; //error message
    end;
if isBlank = FALSE then
  begin
  minDate:= getMinDate(chartDataDate); //getting the lowest date entered
  maxDate:= getMaxDate(chartDataDate); //getting the highest date entered
  cht_bmi.BottomAxis.Increment:=datetimestep[dtOneDay];
  cht_bmi.BottomAxis.SetMinMax(minDate,maxDate);
  series1.GetHorizAxis.SetMinMax(minValue(chartDataBMI),maxValue(chartDataBMI));
  cht_bmi.leftaxis.SetMinMax(15,40)  ;
  series1.GetVertAxis.SetMinMax(15,40);
  for i := 0 to 4 do
    begin
    series1.AddXY(chartDataDate[i], chartDatabmi[i], formatDateTime('dd/mm/yyyy', chartDatadate[i]),1);
    end;
  //cht_bmi.LeftAxis.Minimum:= low(chartDataBMI); //finding min value from bmi array
  //cht_bmi.LeftAxis.Maximum:= high(chartDataBMI); //finding mac value from bmi array
  end;


{  chart1.leftaxis.SetMinMax(15,40)  ;
series1.GetVertAxis.SetMinMax(15,40);
chart1.LeftAxis.Labels:=true;
chart1.LeftAxis.LabelsOnAxis:=true;
 chart1.LeftAxis.LabelsSeparation:=1;

 chart1.BottomAxis.Increment:= datetimestep[dtOneDay];
chart1.BottomAxis.SetMinMax(EncodeDate(dat1,1,1 ),EncodeDate(2010,1,5))  ;
series1.GetHorizAxis.SetMinMax(EncodeDate(dat1,1,1 ),EncodeDate(2010,1,5));
 series1.AddXY(EncodeDate(2010,1,1), 25, FormatDateTime('dd/mm/yyyy', strtodate('01/01/2010')),1);
  series1.AddXY(EncodeDate(2010,1,2), 25, FormatDateTime('dd/mm/yyyy', strtodate('02/01/2010')),1);
   series1.AddXY(EncodeDate(2010,1,3), 28, FormatDateTime('dd/mm/yyyy', strtodate('03/01/2010')),1);
  series1.AddXY(EncodeDate(2010,1,4), 32, FormatDateTime('dd/mm/yyyy', strtodate('04/01/2010')),1);
   series1.AddXY(EncodeDate(2010,1,5), 28, FormatDateTime('dd/mm/yyyy', strtodate('05/01/2010')),1); }


end;

procedure Tform_bmiCharts.FormCreate(Sender: TObject);
begin
lbl_cdrError.Hide;
lbl_stgError.Hide;
stg_choices.Cells[0,0]:='Choice 1';
stg_choices.Cells[0,1]:='Choice 2';
stg_choices.Cells[0,2]:='Choice 3';
stg_choices.Cells[0,3]:='Choice 4';
stg_choices.Cells[0,4]:='Choice 5';

end;

end.
